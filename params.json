{
  "name": "Capsule Clash",
  "tagline": "fall2016-project-morteriser",
  "body": "# Capsule Clash\r\n\r\n[![Build Status](https://travis-ci.org/cpe305/fall2016-project-morteriser.svg?branch=master)](https://travis-ci.org/cpe305/fall2016-project-morteriser)\r\n\r\nCapsule Clash is a 2 player strategy game where players select units to fight each other with on a turn based board.\r\n\r\nGithub url: https://github.com/cpe305/fall2016-project-morteriser\r\n\r\n## Description\r\n\r\n\r\n![Player 2 selects their units after Player 1.](http://i.imgur.com/llzVJSq.png)\r\n\r\nEach player begins with their selected units.\r\n\r\n![Both players have chosen the same units but in a different order.](http://i.imgur.com/6WLhq3C.png)\r\n\r\nPlayer 1 begins their turn and is able to:\r\n   - Select a unit they own:\r\n      \r\n      - Select to Move:\r\n         - Select a tile to move to. Able to Attack afterwards or end the turn.\r\n![Movement Selection](http://i.imgur.com/52UfvcH.png)\r\n      - Select to Attack:\r\n         - Select a tile to attack if possible. Will end the turn afterwards.\r\n![Attack Selection](http://i.imgur.com/pinwMiq.png)\r\n      - Select to end turn.\r\n\r\n![Finished turn after killing an enemy unit.](http://i.imgur.com/BcALpao.png)\r\n\r\nPlayer 1's turn then ends, and player 2's turn begins, giving them the same choices to follow.\r\n\r\nAfter an attack is dealt the units will lose health based on the damage it will take. When a unit no longer has any health it will be removed from play. A player wins once all the opposing units are gone or they have the highest overall health of all their units should 50 turns have based for both players.\r\n\r\n## System Architecture\r\n\r\n3-Tier Layered Architecture:\r\n![3-Tier](http://i.imgur.com/xpIyA2U.png)\r\n\r\n## UML Diagram\r\n\r\nClass Diagram:\r\n![Class Diagram](http://i.imgur.com/lM2toKH.png)\r\n\r\n## Design Patterns\r\n\r\n**Singleton Pattern:**\r\n   - Used for FigurineCollection and Renderer classes. Both can only be instantiated once due to creating a lot of expensive objects that are specific to what is read from an xml document. In the case of Renderer, the Texture class takes a lot of resources to create and using Singleton prevents the need to create it each time. While the FigurineCollection is meant to be used by many classes whenever it wants a reference to any of the possible figurines, preventing the need to instantiate all existing ones for each class that wants to look.\r\n\r\n**Strategy Pattern:**\r\n   - Used for Action interface. Allows Figurines to have different actions that they can take by implementing different classes to do each separate functionality. The application of this is how StandardAction calculates the damage based on your attack and the target's defense, while PierceAction calculates the damage based on your attack while ignoring the target's defense.\r\n\r\n**Factory Method Pattern:**\r\n   - Used for ActionFactory class. Allows the creation of a certain type of Action for each Figurine based on what was read in the xml document of FigurineCollection. This allows the document to say something simple like \"standard\" to then have the factory interpret that as instantiating a StandardAction class to put as that Figurine's Action.\r\n\r\n**Observer Pattern:**\r\n   - Used on MainGame and Board classes. Board is the Subject while MainGame is the Observer, as Board deals with all the logic in the game while MainGame deals with the graphics and user input. Whenever a change occurs in board, it notifies the MainGame to inform it to change what it displays.\r\n\r\n## Tools Used\r\n\r\n   - Libgdx\r\n   - Gradle\r\n\r\n## Contact\r\n\r\nE-mail: hstoytch@calpoly.edu\r\nAlternative e-mail: christoytchev@gmail.com\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}